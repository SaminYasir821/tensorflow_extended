# this code is a part of the chapter Data Ingestion from the book Building ML Pipelines by Hannes Hapke



import tensorflow as tf

with tf.io.TFRecordWriter("test.tfrecord") as w:
    w.write(b"First Record")
    w.write(b"Second Record")

for record in tf.data.TFRecordDataset("test.tfrecord"):
    print(record)


#part 2 generated by chaGPT

import tensorflow as tf

# Helper functions to create Features
def _bytes_feature(value):
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))

def _int64_feature(value):
    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))

# Example data â€” here we fake image data
image_data_1 = b'image_bytes_1'
label_1 = 0

image_data_2 = b'image_bytes_2'
label_2 = 1

# Create two Example protos
example_1 = tf.train.Example(features=tf.train.Features(feature={
    'image_raw': _bytes_feature(image_data_1),
    'label': _int64_feature(label_1),
}))




# note other way to write



# features=tf.train.Features(feature={
#     'image_raw': _bytes_feature(image_data_1),
#     'label': _int64_feature(label_1),
# })

# example_1 = tf.train.Example(features=features)



example_2 = tf.train.Example(features=tf.train.Features(feature={
    'image_raw': _bytes_feature(image_data_2),
    'label': _int64_feature(label_2),
}))

# Write Examples to TFRecord file
with tf.io.TFRecordWriter('example.tfrecord') as writer:
    writer.write(example_1.SerializeToString())
    writer.write(example_2.SerializeToString())






# Define feature description for parsing
feature_description = {
    'image_raw': tf.io.FixedLenFeature([], tf.string),
    'label': tf.io.FixedLenFeature([], tf.int64),
}

# Parsing function
def _parse_function(example_proto):
    return tf.io.parse_single_example(example_proto, feature_description)

# Create a TFRecordDataset
raw_dataset = tf.data.TFRecordDataset('example.tfrecord')

# Map parsing function over dataset
parsed_dataset = raw_dataset.map(_parse_function)

# Iterate through parsed examples
for parsed_record in parsed_dataset:
    image_raw = parsed_record['image_raw'].numpy()
    label = parsed_record['label'].numpy()
    print(f'Image bytes: {image_raw}, Label: {label}')
